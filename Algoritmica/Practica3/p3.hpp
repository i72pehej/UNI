#ifndef P3_HPP
#define P3_HPP


////////////////////////////////////////////////////////////////////////////////

// Clase que representa un entero grande
class Entero {
  private:
    std::string entero_; // Numero entero en formato de string
    int tamMax_; // TamaÃ±o maximo del entero

  public:
    Entero (const Entero num, const int tam);  // Constructor
    virtual ~Entero (); // Destructor

    // Observadores
    std::string getEnteroStr();
    int getEnteroInt();
    int getTamMax();

    // Modificadores
    void setEntero();
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////// METODOS PUBLICOS ////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////

// Constructor de la clase Entero
Entero (const Entero num, const int tam) {
  this -> entero_ = "";
  this -> tamMax_ = 4;
}

////////////////////////////////////////////////////////////////////////////////

// Devuelve el numero de la clase Entero en formato "string"
void getEnteroStr() {

}

////////////////////////////////////////////////////////////////////////////////

// Devuelve el numero de la clase Entero en formato "int"
void getEnteroInt() {

}

////////////////////////////////////////////////////////////////////////////////

// Devuelve el tamaÃ±o maximo de digitos del valor de Entero
void getTamMax() {

}

////////////////////////////////////////////////////////////////////////////////

// Asigna un valor a la clase Entero
void setEntero() {

}

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////////////////////////// SOBRECARGA DE OPERADORES ////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////

// Sobrecarga del operador de la suma
Entero &operator +(Entero &res, const Entero e1, const Entero e2) {


  return res;
}

////////////////////////////////////////////////////////////////////////////////

// Sobrecarga del operador del producto
Entero &operator *(Entero &res, const Entero e1, const Entero e2) {


  return res;
}

////////////////////////////////////////////////////////////////////////////////

// Sobrecarga del operador de entrada (std::cin >>;)
istream &operator >>(Entero &entrada, istream &in) {
  cout << "Introduzca el valor (debe ser menor de 4 digitos): ";

  in >> entrada.getEntero();
  in.ignore();

  return in;
}

////////////////////////////////////////////////////////////////////////////////

// Sobrecarga del operador de salida (std::cout <<;)
ostream &operator <<(const Entero salida, ostream &out) {
  out << salida.getEntero();

  return out;
}

////////////////////////////////////////////////////////////////////////////////





#endif
